// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	GetNodeParents(ctx context.Context, in *Node, opts ...grpc.CallOption) (Crud_GetNodeParentsClient, error)
	GetNodePrice(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Price, error)
	SetNodePrice(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Ok, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) GetNodeParents(ctx context.Context, in *Node, opts ...grpc.CallOption) (Crud_GetNodeParentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Crud_ServiceDesc.Streams[0], "/crud.Crud/GetNodeParents", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudGetNodeParentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crud_GetNodeParentsClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type crudGetNodeParentsClient struct {
	grpc.ClientStream
}

func (x *crudGetNodeParentsClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudClient) GetNodePrice(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Price, error) {
	out := new(Price)
	err := c.cc.Invoke(ctx, "/crud.Crud/GetNodePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) SetNodePrice(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/crud.Crud/SetNodePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	GetNodeParents(*Node, Crud_GetNodeParentsServer) error
	GetNodePrice(context.Context, *Node) (*Price, error)
	SetNodePrice(context.Context, *Node) (*Ok, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) GetNodeParents(*Node, Crud_GetNodeParentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodeParents not implemented")
}
func (UnimplementedCrudServer) GetNodePrice(context.Context, *Node) (*Price, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodePrice not implemented")
}
func (UnimplementedCrudServer) SetNodePrice(context.Context, *Node) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodePrice not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_GetNodeParents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudServer).GetNodeParents(m, &crudGetNodeParentsServer{stream})
}

type Crud_GetNodeParentsServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type crudGetNodeParentsServer struct {
	grpc.ServerStream
}

func (x *crudGetNodeParentsServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _Crud_GetNodePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).GetNodePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/GetNodePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).GetNodePrice(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_SetNodePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).SetNodePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/SetNodePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).SetNodePrice(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodePrice",
			Handler:    _Crud_GetNodePrice_Handler,
		},
		{
			MethodName: "SetNodePrice",
			Handler:    _Crud_SetNodePrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodeParents",
			Handler:       _Crud_GetNodeParents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/proto/crud.proto",
}
